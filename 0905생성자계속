*


class Test{
   
   //private 생성자를 작성하는 이유는 개발자의 의도대로만 객체를 생성해서 사용할 수 있도록.
   private Test(){    //외부에서 접근 불가(외부에서 직접 생성 불가)
   }
   //내부에서 현재 객체를 생성해준다. - 메소드

     public static Test instance(){      //Test가 리턴 타입, 이름은 보통 instance로  
						<-메소드가 static이어야 외부에서 이 메소드 호출 가능
						<-static이어야 외부에서 객체 생성 안함
	Test t = new Test();
	return t;
     }
}

//////////////////////////////////////////
//new Test();    //외부에서는 기본생성자 호출 불가능 - 오류  : 이것이 목적
//메소드를 통해서 Test 객체를 얻어온다

Test test = Test.instance();


----------------------------------------------------------------------------------------------------------------------

--private 생성자를 이용해서 싱글톤 패턴 클래스를 만들 수 있다.

class Service{
   private Service(){} //외부에서 생성불가

   public static Service instance(){    //Service를 리턴함
	Service service = new Service();
	return service;
   }
}


//////////////////////////////////////////

Service service1 = Service.instance();
Service service2 = Service.instance();
Service service3 = Service.instance();    //매번 새 객체가 만들어지기 때문에 service1,2,3의 주소값은 모두 다름(싱글톤 아님)





->>>>>>>>>

class Service{
   static Service service = new Service();   //static 변수는 100개를 만들어도 하나로 본다
   private Service(){} 

   public static Service instance(){    
	
	return service;                      //static 변수라 접근 가능
   }
}

//////////////////////////////////////////

Service service1 = Service.instance();
Service service2 = Service.instance();
Service service3 = Service.instance();      //하나의 객체임


결론 : 싱글톤 패턴 클래스 만드는 방법
	- private 생성자 만든다
	- 멤버변수 현재 객체를 생성해서 담는다. -static 변수
	- 현재 객체를 리턴해주는 static 메소드를 만든다..
